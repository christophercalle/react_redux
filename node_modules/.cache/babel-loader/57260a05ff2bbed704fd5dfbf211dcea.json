{"ast":null,"code":"import _regeneratorRuntime from \"/Users/christophercalle/Desktop/CLONE/react_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/christophercalle/Desktop/CLONE/react_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport R from 'ramda';\nimport phones from './mockPhones';\nimport categories from './mockCategories';\nexport var fetchPhones =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              resolve(phones);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function fetchPhones() {\n    return _ref.apply(this, arguments);\n  };\n}(); // export const loadMorePhones = async ({offset}) => {\n//   return new Promise(resolve => {\n//     resolve(phones)\n//   })\n// }\n\nexport var fetchPhoneById =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(id) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var phone = R.find(R.propEq('id', id), phones);\n              resolve(phone);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function fetchPhoneById(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchCategories =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n              resolve(categories);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function fetchCategories() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/christophercalle/Desktop/CLONE/react_redux/src/node_modules/api/index.js"],"names":["R","phones","categories","fetchPhones","Promise","resolve","fetchPhoneById","id","reject","phone","find","propEq","fetchCategories"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,OAAd;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAO,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CAClB,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BA,cAAAA,OAAO,CAACJ,MAAD,CAAP;AACD,aAFM,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXE,WAAW;AAAA;AAAA;AAAA,GAAjB,C,CAMP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMG,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CACrB,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtC,kBAAMC,KAAK,GAAGT,CAAC,CAACU,IAAF,CAAOV,CAAC,CAACW,MAAF,CAAS,IAAT,EAAeJ,EAAf,CAAP,EAA2BN,MAA3B,CAAd;AACAI,cAAAA,OAAO,CAACI,KAAD,CAAP;AACD,aAHM,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdH,cAAc;AAAA;AAAA;AAAA,GAApB;AAOP,OAAO,IAAMM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CACtB,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtCH,cAAAA,OAAO,CAACH,UAAD,CAAP;AACD,aAFM,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfU,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import R from 'ramda'\n\nimport phones from './mockPhones'\nimport categories from './mockCategories'\n\nexport const fetchPhones = async () => {\n  return new Promise(resolve => {\n    resolve(phones)\n  })\n}\n\n// export const loadMorePhones = async ({offset}) => {\n//   return new Promise(resolve => {\n//     resolve(phones)\n//   })\n// }\n\nexport const fetchPhoneById = async (id) => {\n  return new Promise((resolve, reject) => {\n    const phone = R.find(R.propEq('id', id), phones)\n    resolve(phone)\n  })\n}\n\nexport const fetchCategories = async () => {\n  return new Promise((resolve, reject) => {\n    resolve(categories)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}