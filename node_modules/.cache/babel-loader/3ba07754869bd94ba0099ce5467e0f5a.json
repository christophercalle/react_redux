{"ast":null,"code":"import R from 'ramda';\nimport { FETCH_PHONES_SUCCESS, LOAD_MORE_PHONES_SUCCESS, SEARCH_PHONE } from 'actionTypes';\nvar initialState = {\n  ids: [],\n  search: ''\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case FETCH_PHONES_SUCCESS:\n      return R.merge(state, {\n        ids: R.pluck('id', payload)\n      });\n\n    case LOAD_MORE_PHONES_SUCCESS:\n      var ids = R.pluck('id', payload);\n      return R.merge(state, {\n        ids: R.concat(ids, state.ids)\n      });\n\n    case SEARCH_PHONE:\n      return R.merge(state, {\n        search: payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/christophercalle/Desktop/CLONE/react_redux/src/node_modules/reducers/phonesPage.js"],"names":["R","FETCH_PHONES_SUCCESS","LOAD_MORE_PHONES_SUCCESS","SEARCH_PHONE","initialState","ids","search","state","type","payload","merge","pluck","concat"],"mappings":"AAAA,OAAOA,CAAP,MAAc,OAAd;AAEA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,YAHF,QAIO,aAJP;AAMA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE,EADc;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,gBAAe,YAA2C;AAAA,MAA1CC,KAA0C,uEAAlCH,YAAkC;;AAAA;AAAA,MAAnBI,IAAmB,QAAnBA,IAAmB;AAAA,MAAbC,OAAa,QAAbA,OAAa;;AACxD,UAAQD,IAAR;AACE,SAAKP,oBAAL;AACE,aAAOD,CAAC,CAACU,KAAF,CAAQH,KAAR,EAAe;AACpBF,QAAAA,GAAG,EAAEL,CAAC,CAACW,KAAF,CAAQ,IAAR,EAAcF,OAAd;AADe,OAAf,CAAP;;AAGF,SAAKP,wBAAL;AACE,UAAMG,GAAG,GAAGL,CAAC,CAACW,KAAF,CAAQ,IAAR,EAAcF,OAAd,CAAZ;AACA,aAAOT,CAAC,CAACU,KAAF,CAAQH,KAAR,EAAe;AACpBF,QAAAA,GAAG,EAAEL,CAAC,CAACY,MAAF,CAASP,GAAT,EAAcE,KAAK,CAACF,GAApB;AADe,OAAf,CAAP;;AAGF,SAAKF,YAAL;AACE,aAAOH,CAAC,CAACU,KAAF,CAAQH,KAAR,EAAe;AACpBD,QAAAA,MAAM,EAAEG;AADY,OAAf,CAAP;;AAIF;AACE,aAAOF,KAAP;AAhBJ;AAkBD,CAnBD","sourcesContent":["import R from 'ramda'\n\nimport {\n  FETCH_PHONES_SUCCESS,\n  LOAD_MORE_PHONES_SUCCESS,\n  SEARCH_PHONE\n} from 'actionTypes'\n\nconst initialState = {\n  ids: [],\n  search: ''\n}\n\nexport default (state = initialState, {type, payload}) => {\n  switch (type) {\n    case FETCH_PHONES_SUCCESS:\n      return R.merge(state, {\n        ids: R.pluck('id', payload)\n      })\n    case LOAD_MORE_PHONES_SUCCESS:\n      const ids = R.pluck('id', payload)\n      return R.merge(state, {\n        ids: R.concat(ids, state.ids)\n      })\n    case SEARCH_PHONE:\n      return R.merge(state, {\n        search: payload\n      })\n\n    default:\n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}