{"ast":null,"code":"import _regeneratorRuntime from \"/Users/christophercalle/Desktop/CLONE/react_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/christophercalle/Desktop/CLONE/react_redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FETCH_PHONES_START, FETCH_PHONES_SUCCESS, FETCH_PHONES_FAILURE, LOAD_MORE_PHONES_START, LOAD_MORE_PHONES_SUCCESS, LOAD_MORE_PHONES_FAILURE, FETCH_PHONE_BY_ID_START, FETCH_PHONE_BY_ID_SUCCESS, FETCH_PHONE_BY_ID_FAILURE, ADD_PHONE_TO_BASKET, SEARCH_PHONE, FETCH_CATEGORIES_START, FETCH_CATEGORIES_SUCCESS, FETCH_CATEGORIES_FAILURE, REMOVE_PHONE_FROM_BASKET, CLEAN_BASKET } from 'actionTypes';\nimport { getRenderedPhonesLength } from 'selectors';\nimport { fetchPhones as fetchPhonesApi, loadMorePhones as loadMorePhonesApi, fetchPhoneById as fetchPhoneByIdApi, fetchCategories as fetchCategoriesApi } from 'api';\nexport var fetchPhones = function fetchPhones() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var phones;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: FETCH_PHONES_START\n                });\n                _context.prev = 1;\n                _context.next = 4;\n                return fetchPhonesApi();\n\n              case 4:\n                phones = _context.sent;\n                dispatch({\n                  type: FETCH_PHONES_SUCCESS,\n                  payload: phones\n                });\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                dispatch({\n                  type: FETCH_PHONES_FAILURE,\n                  payload: _context.t0,\n                  error: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var loadMorePhones = function loadMorePhones() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var offset, phones;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                offset = getRenderedPhonesLength(getState());\n                dispatch({\n                  type: LOAD_MORE_PHONES_START\n                });\n                _context2.prev = 2;\n                _context2.next = 5;\n                return loadMorePhonesApi({\n                  offset: offset\n                });\n\n              case 5:\n                phones = _context2.sent;\n                dispatch({\n                  type: LOAD_MORE_PHONES_SUCCESS,\n                  payload: phones\n                });\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                dispatch({\n                  type: LOAD_MORE_PHONES_FAILURE,\n                  payload: _context2.t0,\n                  error: true\n                });\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 9]]);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchPhoneById = function fetchPhoneById(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var phone;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch({\n                  type: FETCH_PHONE_BY_ID_START\n                });\n                _context3.prev = 1;\n                _context3.next = 4;\n                return fetchPhoneByIdApi(id);\n\n              case 4:\n                phone = _context3.sent;\n                dispatch({\n                  type: FETCH_PHONE_BY_ID_SUCCESS,\n                  payload: phone\n                });\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n                dispatch({\n                  type: FETCH_PHONE_BY_ID_FAILURE,\n                  payload: _context3.t0,\n                  error: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 8]]);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addPhoneToBasket = function addPhoneToBasket(id) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_PHONE_TO_BASKET,\n      payload: id\n    });\n  };\n};\nexport var searchPhone = function searchPhone(text) {\n  return function (dispatch) {\n    dispatch({\n      type: SEARCH_PHONE,\n      payload: text\n    });\n  };\n};\nexport var fetchCategories = function fetchCategories() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var phones;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dispatch({\n                  type: FETCH_CATEGORIES_START\n                });\n                _context4.prev = 1;\n                _context4.next = 4;\n                return fetchCategoriesApi();\n\n              case 4:\n                phones = _context4.sent;\n                dispatch({\n                  type: FETCH_CATEGORIES_SUCCESS,\n                  payload: phones\n                });\n                _context4.next = 11;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](1);\n                dispatch({\n                  type: FETCH_CATEGORIES_FAILURE,\n                  payload: _context4.t0,\n                  error: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 8]]);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var removePhoneFromBasket = function removePhoneFromBasket(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                dispatch({\n                  type: REMOVE_PHONE_FROM_BASKET,\n                  payload: id\n                });\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var cleanBasket = function cleanBasket() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_BASKET\n    });\n  };\n};\nexport var basketCheckout = function basketCheckout(phones) {\n  return function () {\n    alert(JSON.stringify(phones));\n  };\n};","map":{"version":3,"sources":["/Users/christophercalle/Desktop/CLONE/react_redux/src/node_modules/actions/index.js"],"names":["FETCH_PHONES_START","FETCH_PHONES_SUCCESS","FETCH_PHONES_FAILURE","LOAD_MORE_PHONES_START","LOAD_MORE_PHONES_SUCCESS","LOAD_MORE_PHONES_FAILURE","FETCH_PHONE_BY_ID_START","FETCH_PHONE_BY_ID_SUCCESS","FETCH_PHONE_BY_ID_FAILURE","ADD_PHONE_TO_BASKET","SEARCH_PHONE","FETCH_CATEGORIES_START","FETCH_CATEGORIES_SUCCESS","FETCH_CATEGORIES_FAILURE","REMOVE_PHONE_FROM_BASKET","CLEAN_BASKET","getRenderedPhonesLength","fetchPhones","fetchPhonesApi","loadMorePhones","loadMorePhonesApi","fetchPhoneById","fetchPhoneByIdApi","fetchCategories","fetchCategoriesApi","dispatch","type","phones","payload","error","getState","offset","id","phone","addPhoneToBasket","searchPhone","text","removePhoneFromBasket","cleanBasket","basketCheckout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import {\n  FETCH_PHONES_START,\n  FETCH_PHONES_SUCCESS,\n  FETCH_PHONES_FAILURE,\n  LOAD_MORE_PHONES_START,\n  LOAD_MORE_PHONES_SUCCESS,\n  LOAD_MORE_PHONES_FAILURE,\n  FETCH_PHONE_BY_ID_START,\n  FETCH_PHONE_BY_ID_SUCCESS,\n  FETCH_PHONE_BY_ID_FAILURE,\n  ADD_PHONE_TO_BASKET,\n  SEARCH_PHONE,\n  FETCH_CATEGORIES_START,\n  FETCH_CATEGORIES_SUCCESS,\n  FETCH_CATEGORIES_FAILURE,\n  REMOVE_PHONE_FROM_BASKET,\n  CLEAN_BASKET\n} from 'actionTypes'\nimport {getRenderedPhonesLength} from 'selectors'\nimport {\n  fetchPhones as fetchPhonesApi,\n  loadMorePhones as loadMorePhonesApi,\n  fetchPhoneById as fetchPhoneByIdApi,\n  fetchCategories as fetchCategoriesApi,\n} from 'api'\n\nexport const fetchPhones = () => async dispatch => {\n  dispatch({type: FETCH_PHONES_START})\n\n  try {\n    const phones = await fetchPhonesApi()\n    dispatch({\n      type: FETCH_PHONES_SUCCESS,\n      payload: phones\n    })\n  } catch (err) {\n    dispatch({\n      type: FETCH_PHONES_FAILURE,\n      payload: err,\n      error: true\n    })\n  }\n}\n\nexport const loadMorePhones = () => async (dispatch, getState) => {\n  const offset = getRenderedPhonesLength(getState())\n\n  dispatch({type: LOAD_MORE_PHONES_START})\n\n  try {\n    const phones = await loadMorePhonesApi({offset})\n    dispatch({\n      type: LOAD_MORE_PHONES_SUCCESS,\n      payload: phones\n    })\n  } catch (err) {\n    dispatch({\n      type: LOAD_MORE_PHONES_FAILURE,\n      payload: err,\n      error: true\n    })\n  }\n}\n\nexport const fetchPhoneById = (id) => async dispatch => {\n  dispatch({type: FETCH_PHONE_BY_ID_START})\n\n  try {\n    const phone = await fetchPhoneByIdApi(id)\n    dispatch({\n      type: FETCH_PHONE_BY_ID_SUCCESS,\n      payload: phone\n    })\n  } catch (err) {\n    dispatch({\n      type: FETCH_PHONE_BY_ID_FAILURE,\n      payload: err,\n      error: true\n    })\n  }\n}\n\nexport const addPhoneToBasket = id => dispatch => {\n  dispatch({\n    type: ADD_PHONE_TO_BASKET,\n    payload: id\n  })\n}\n\nexport const searchPhone = (text) => dispatch => {\n  dispatch({\n    type: SEARCH_PHONE,\n    payload: text\n  })\n}\n\nexport const fetchCategories = () => async dispatch => {\n  dispatch({type: FETCH_CATEGORIES_START})\n\n  try {\n    const phones = await fetchCategoriesApi()\n    dispatch({\n      type: FETCH_CATEGORIES_SUCCESS,\n      payload: phones\n    })\n  } catch (err) {\n    dispatch({\n      type: FETCH_CATEGORIES_FAILURE,\n      payload: err,\n      error: true\n    })\n  }\n}\n\nexport const removePhoneFromBasket = id => async dispatch => {\n  dispatch({\n    type: REMOVE_PHONE_FROM_BASKET,\n    payload: id\n  })\n}\n\nexport const cleanBasket = () => dispatch => {\n  dispatch({\n    type: CLEAN_BASKET\n  })\n}\n\n\nexport const basketCheckout = phones => () => {\n  alert(JSON.stringify(phones))\n}"]},"metadata":{},"sourceType":"module"}